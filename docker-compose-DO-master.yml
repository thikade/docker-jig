version: "3"

volumes:
  chronograf:

services:
  haproxy:
    restart: unless-stopped
    container_name: haproxy
    image: haproxy-certbot:2.1.0-buster
    hostname: haproxy
    # entrypoint:
    ulimits:
      nproc: 16000
      nofile: 16000
    # cap_add:
    #   - NET_ADMIN
    build:
      # dockerfile: Dockerfile
      dockerfile: Dockerfile
      context: haproxy
    # environment:
    #   DUMMY: xxx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${PWD}/volumes/haproxy/config.d:/config
      - ${PWD}/volumes/haproxy/letsencrypt:/etc/letsencrypt
      - ${PWD}/volumes/haproxy/certs.d:/usr/local/etc/haproxy/certs.d

  influxdb:
    image: influxdb:1.7.9-alpine
    # image: influxdb:1.7.9-alpine-custom
    # build:
    #   context: "influxdb"
    #   args:
    #     - INFLUXDB_VERSION=1.7.9
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=jmeter
    volumes:
      - ${PWD}/volumes/influxdb:/var/lib/influxdb

  chronograf:
    image: chronograf:1.7-alpine
    container_name: chronograf
    volumes:
      # create a named Docker volume:
      - chronograf:/var/lib/chronograf
    environment:
      - BASE_PATH=/chronograf
    ports:
      # The WebUI for Chronograf is served on port 8888
      - "8888:8888"
    depends_on:
      - influxdb

  telegraf:
    image: telegraf:1.12.6-alpine
    # image: telegraf:1.12.6-alpine-custom
    # build:
    #   context: "telegraf"
    #   dockerfile: Dockerfile.x86_64
    #   args:
    #     - TELEGRAF_VERSION=1.12.6
    container_name: telegraf
    hostname: tgf-${HOSTNAME}
    environment:
      - INFLUX_DB_HOST=http://influxdb:8086
      - HOST_PROC=/rootfs/proc
      - HOST_SYS=/rootfs/sys
      - HOST_ETC=/rootfs/etc
    volumes:
      - ${PWD}/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  # jmeter-master
  master:
    container_name: master
    image: jmeter:5.2-alpine-generic
    hostname: controller-priv.2i.at
    ulimits:
      nproc: 65535
      nofile: 65535
    build:
      context: "jmeter"
      args:
        - JMETER_VERSION=5.2.1
    environment:
      DEBUG: 1
      JMETER_ROLE: MASTER
      # JMETER_PLAN: /data/default_test_plan.jmx
      JMETER_PLAN: /data/Lasttest-AS2020.jmx
      JMETER_REMOTE_SERVERS: -Rjmeter-slave1-priv.2i.at:1099,jmeter-slave2-priv.2i.at:1099
      HEAP: -Xms2g -Xmx2g -XX:MaxMetaspaceSize=512m
      # Set fixed RMI port & hostname!
      # see https://bz.apache.org/bugzilla/show_bug.cgi?id=62463
      #   and https://stackoverflow.com/questions/50752126/unable-to-start-jmeter-4-0-client-with-ssl-rmi/50888705
      #   for details on "-Dclient.rmi.localport"
      JMETER_OPTS: -Djava.net.preferIPv4Stack=true -Dclient.rmi.localport=40000 -Djava.rmi.server.hostname=${RMI_HOST}
    ports:
      # bind to private IPs only instead of *
      - "${HOST_PRIVATE_IP}:40000:40000"
      - "${HOST_PRIVATE_IP}:40001:40001"
      - "${HOST_PRIVATE_IP}:40002:40002"
      - "${HOST_PRIVATE_IP}:40003:40003"
      - "${HOST_PRIVATE_IP}:40004:40004"
      - "${HOST_PRIVATE_IP}:40005:40005"
      - "${HOST_PRIVATE_IP}:40006:40006"
      - "${HOST_PRIVATE_IP}:40007:40007"
      - "${HOST_PRIVATE_IP}:40008:40008"
      - "${HOST_PRIVATE_IP}:40009:40009"
      - "127.0.0.1:4445:4445"

    volumes:
      - ${PWD}/volumes/jmeter:/data

  grafana:
    container_name: grafana
    build:
      context: "grafana"
    volumes:
      - ${PWD}/volumes/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
