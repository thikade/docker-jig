#!/bin/bash

# trap "echo 'SIGTERM received. Stopping jmeter process ....'; kill 1" TERM

export PATH=$PATH:${JMETER_BIN}

#### SIMPLE OPTIONS PARSING START
OPTIONS_STRING=":t"
JMX_FILE=
HELP=

while getopts ":h:t:" options; do
  case "${options}" in
    t)
      JMX_FILE=${OPTARG}
      test ! -f  "$JMX_FILE" && {
        echo "ERROR: JMX testplan cannot be read: \"$JMX_FILE\" !"
        exit 2
      }
      JMETER_PLAN=${JMX_FILE-$JMETER_PLAN}
      echo "overriding ENV JMX file with: \"$JMETER_PLAN\""
      shift 2
      ;;
    h)
      HELP=${OPTARG}; usage; exit 1
      ;;
    :) echo "ERROR: required option argument missing! "                                        # If expected argument omitted:
      exit 3
      ;;
    *)
      ;;
  esac
done
#### SIMPLE OPTIONS PARSING END
echo "ENV variables: ----------------"
env | sort | grep JMETER
echo "-------------------------------"

echo "-------------------------------"
echo "new JMETER HEAP=$HEAP"
echo "-------------------------------"

echo ""
echo "startup script name is: $0"
echo "args are              : $*"
echo "-------------------------------"

TS_FORMAT=+%Y-%m-%d-%H.%M.%S
TS=$(date $TS_FORMAT)
PREFIX=${JMETER_PLAN}_${TS}
JM_LOG=$(dirname $JMETER_PLAN)/jmeter.log
REPORT_DIR=${PREFIX}_report
SAMPLES_LOG=${PREFIX}_samples.jtl

# if script is called using "entrypoint.sh", just tail the JMeter logs!
if [ "$(basename $0)" = "entrypoint.sh" ]
then
  # container startup will tail log forever
  echo "$TS: tailing jmeter log(s): \"$JM_LOG\" ..."
  echo "-------------------------------"
  cat << EOT >> $JM_LOG

#############  JMETER CONTAINER STARTED #############
#############  JMETER CONTAINER STARTED #############
#############  JMETER CONTAINER STARTED #############

EOT
  tail -F $JM_LOG  2>/dev/null
fi

# script is called using "run" ...

if [ "$JMETER_ROLE" = "SLAVE" ]
then
  # this is a slave container
  tail -F /jmeter/jmeter-server.log 2>/dev/null &     # slaves use their own log file
  while true; do            # restart slave when it exits
    echo -e "\n\n======================================================================"
    echo "$(date $TS_FORMAT): starting the JMeter SLAVE server process ..."
    jmeter-server
    sleep 5
  done

elif [ "$JMETER_ROLE" = "MASTER" ]
then
  if [ -f "$JMETER_PLAN" ]
  then
    # test -d $REPORT_DIR || mkdir $REPORT_DIR
    echo -e "\n\n"
    echo "=> JMX testplan : $JMETER_PLAN "
    echo -e "\n"
    echo "=> user.props: numThreads :  $(grep threads=  /data/user.properties)"
    echo "=> user.props: duration   :  $(grep duration= /data/user.properties)"
    echo "=> user.props: rampUp     :  $(grep rampUp=   /data/user.properties)"
    echo ""
    echo "=> user.props: URL        :  $(grep webUrl=   /data/user.properties)"
    echo "=> user.props: Protocol   :  $(grep protocol= /data/user.properties)"
    echo -e "\n\n"
    echo "$TS : starting the JMeter MASTER process ..."

    # detect RUN MODE
    if [ "$(basename $0)" = "runlocal" ]; then
      echo -e "\nLOCAL MODE: no remotes."
      test -n "$DEBUG" && set -x
      jmeter -n -t ${JMETER_PLAN} -j ${JM_LOG} -l ${SAMPLES_LOG} -e -o $REPORT_DIR -G/data/user.properties $*
      set +x
    else
      echo -e "\nREMOTE MODE: remotes: ${JMETER_REMOTE_SERVERS}"
      test -n "$DEBUG" && set -x
      jmeter -n -t ${JMETER_PLAN} -j ${JM_LOG} -l ${SAMPLES_LOG} -e -o $REPORT_DIR -G/data/user.properties -X ${JMETER_REMOTE_SERVERS} $*
      set +x
    fi

    set +x
    echo "$(date $TS_FORMAT) : finished JMeter run."
  else
    echo "ERROR: unable to read JMeter plan: \"$JMETER_PLAN\" !"
  fi
else
  echo "FATAL ERROR: Env var 'JMETER_ROLE' needs to be either 'MASTER' or 'SLAVE' !"
  echo "Aborting..."
fi
